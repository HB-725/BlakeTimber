# Generated by Django 5.2.1 on 2025-05-31 15:12

from django.db import migrations, models


def fix_empty_options(apps, schema_editor):
    """
    Fix products with null or empty options by providing default values
    """
    Product = apps.get_model('inventory', 'Product')
    
    for product in Product.objects.filter(option__in=[None, '']):
        if hasattr(product, 'profile') and product.profile:
            # Use profile name as default option
            product.option = f"Standard {product.profile.name}"
        elif hasattr(product, 'category') and product.category:
            # Use category name as default option
            product.option = f"Standard {product.category.name}"
        else:
            # Fallback option
            product.option = "Standard Option"
        product.save()


def reverse_fix_empty_options(apps, schema_editor):
    """
    Reverse migration - no action needed
    """
    pass


class Migration(migrations.Migration):
    dependencies = [
        (
            "inventory",
            "0010_alter_product_options_product_category_product_name_and_more",
        ),
    ]

    operations = [
        # Step 1: Fix empty options before making field required
        migrations.RunPython(
            fix_empty_options,
            reverse_fix_empty_options
        ),
        
        # Step 2: Remove name field
        migrations.RemoveField(
            model_name="product",
            name="name",
        ),
        
        # Step 3: Make option field required
        migrations.AlterField(
            model_name="product",
            name="option",
            field=models.CharField(
                help_text="Product option (length, size, or other specifications)",
                max_length=100,
            ),
        ),
    ]
